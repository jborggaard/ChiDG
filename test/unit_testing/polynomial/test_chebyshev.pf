!>  Test Chebyshev polynomial implementation
!!
!!  Contains:
!!      Tests for 1D Chebyshev polynomials
!!      Tests for 2D tensor-product Chebyshev basis functions
!!
!!
!!
!------------------------------------------------------------------












!-------------------------------------------------
!   Test chebyshev_val - 1D - against analytical solutions
!-------------------------------------------------

@Test
subroutine test_chebyshev_val_1D_0()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 1
    polyval_known = [1._rk, 1._rk, 1._rk]
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_chebyshev_val_1D_1()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 2
    polyval_known = [x(1), x(2), x(3)]
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_chebyshev_val_1D_2()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: chebyshev_val
    
    
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 3
    polyval_known = [2.0_rk*x(1)**2._rk - 1._rk, &
                     2.0_rk*x(2)**2._rk - 1._rk, &
                     2.0_rk*x(3)**2._rk - 1._rk  ]
                     
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_chebyshev_val_1D_3()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 4
    polyval_known = [4.0_rk*x(1)**3._rk - 3.0_rk*x(1), &
                     4.0_rk*x(2)**3._rk - 3.0_rk*x(2), &
                     4.0_rk*x(3)**3._rk - 3.0_rk*x(3)  ]
                     
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_chebyshev_val_1D_4()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 5
    polyval_known = [8.0_rk*x(1)**4._rk - 8.0_rk*x(1)**2._rk + 1.0_rk, &
                     8.0_rk*x(2)**4._rk - 8.0_rk*x(2)**2._rk + 1.0_rk, &
                     8.0_rk*x(3)**4._rk - 8.0_rk*x(3)**2._rk + 1.0_rk ]
                     
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

!------------------------------------------------------------
!   Test Dchebyshev_val recursion against analytical solutions
!------------------------------------------------------------
@Test
subroutine test_Dchebyshev_val_1D_0()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 1
    partial_dir   = 1
    dpolyval_known = [0._rk, 0._rk, 0._rk]
    
    dpolyval_test(1) = dchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine

@Test
subroutine test_Dchebyshev_val_1D_1()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    
    spacedim      = 1
    mode          = 2
    partial_dir   = 1
    dpolyval_known = [1._rk, 1._rk, 1._rk]
    
    dpolyval_test(1) = dchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine

@Test
subroutine test_Dchebyshev_val_1D_2()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 3
    partial_dir   = 1
    dpolyval_known = [4._rk*x(1), 4._rk*x(2), 4._rk*x(3)]
    
    dpolyval_test(1) = dchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine

@Test
subroutine test_Dchebyshev_val_1D_3()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 4
    partial_dir   = 1
    dpolyval_known = [12._rk*x(1)**2._rk - 3._rk, &
                      12._rk*x(2)**2._rk - 3._rk, &
                      12._rk*x(3)**2._rk - 3._rk]
    
    dpolyval_test(1) = dchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine





!------------------------------------------------------------------------------
!   Test second/mixed derivatives(ddchebyshev_val) against analytical solutions
!------------------------------------------------------------------------------
@Test
subroutine test_ddchebyshev_val_1d_P0()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: ddchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: ddpolyval_known,ddpolyval_test,x
    integer(ik)             :: spacedim, mode, partial1, partial2
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim        = 1
    mode            = 1
    partial1        = 1
    partial2        = 1
    ddpolyval_known = [0._rk, 0._rk, 0._rk]
    
    ddpolyval_test(1) = ddchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(2) = ddchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(3) = ddchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial1,partial2)
    
    @assertEqual(ddpolyval_known,ddpolyval_test,tol)

end subroutine test_ddchebyshev_val_1d_P0




@Test
subroutine test_ddchebyshev_val_1d_P1()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_chebyshev,  only: ddchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: ddpolyval_known,ddpolyval_test,x
    integer(ik)             :: spacedim, mode, partial1, partial2
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    ! Important to test at endpoints because some formulas
    ! become undefined at that location
    x = [-1._rk, -0.5_rk, 0._rk, 0.5_rk, 1._rk]
    
    spacedim        = 1
    mode            = 2
    partial1        = 1
    partial2        = 1
    ddpolyval_known = [0._rk, 0._rk, 0._rk, 0._rk, 0._rk]
    
    ddpolyval_test(1) = ddchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(2) = ddchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(3) = ddchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(4) = ddchebyshev_val(spacedim,mode,x(4),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(5) = ddchebyshev_val(spacedim,mode,x(5),ZERO,ZERO,partial1,partial2)
    
    @assertEqual(ddpolyval_known,ddpolyval_test,tol)

end subroutine test_ddchebyshev_val_1d_P1




@Test
subroutine test_ddchebyshev_val_1d_P2()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, FOUR
    use mod_chebyshev,  only: ddchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: ddpolyval_known,ddpolyval_test,x
    integer(ik)             :: spacedim, mode, partial1, partial2
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim        = 1
    mode            = 3
    partial1        = 1
    partial2        = 1
    ddpolyval_known = [FOUR, FOUR, FOUR]
    
    ddpolyval_test(1) = ddchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(2) = ddchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(3) = ddchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial1,partial2)
    
    @assertEqual(ddpolyval_known,ddpolyval_test,tol)

end subroutine test_ddchebyshev_val_1d_P2





@Test
subroutine test_ddchebyshev_val_1d_P3()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, THREE
    use mod_chebyshev,  only: ddchebyshev_val
    
    implicit none
    real(rk), dimension(3)  :: ddpolyval_known,ddpolyval_test,x
    integer(ik)             :: spacedim, mode, partial1, partial2
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim        = 1
    mode            = 4
    partial1        = 1
    partial2        = 1
    ddpolyval_known = 24._rk*x
    
    ddpolyval_test(1) = ddchebyshev_val(spacedim,mode,x(1),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(2) = ddchebyshev_val(spacedim,mode,x(2),ZERO,ZERO,partial1,partial2)
    ddpolyval_test(3) = ddchebyshev_val(spacedim,mode,x(3),ZERO,ZERO,partial1,partial2)
    
    @assertEqual(ddpolyval_known,ddpolyval_test,tol)

end subroutine test_ddchebyshev_val_1d_P3






!-------------------------------------------------
!   Test chebyshev_val - 2D - against analytical solutions
!-------------------------------------------------

@Test
subroutine test_chebyshev_val_2D_00()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    
    ! Find mode that has xi_order = 1  ;; eta_order = 1
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 1  .and. eta_order_2d(i) == 1) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [1._rk, 1._rk, 1._rk, 1._rk, 1._rk]
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),y(1),ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),y(2),ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),y(3),ZERO)
    polyval_test(4) = chebyshev_val(spacedim,mode,x(4),y(4),ZERO)
    polyval_test(5) = chebyshev_val(spacedim,mode,x(5),y(5),ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine






@Test
subroutine test_chebyshev_val_2D_13()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, mode, i
    
    real(rk)                :: tol
    
    tol = 1.e-17_rk

    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    
    ! Find mode that has xi_order = 2  ;; eta_order = 4
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 2  .and. eta_order_2d(i) == 4) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [x(1)*(4.0_rk*y(1)**3._rk - 3.0_rk*y(1)), &
                     x(2)*(4.0_rk*y(2)**3._rk - 3.0_rk*y(2)), &
                     x(3)*(4.0_rk*y(3)**3._rk - 3.0_rk*y(3)), &
                     x(4)*(4.0_rk*y(4)**3._rk - 3.0_rk*y(4)), &
                     x(5)*(4.0_rk*y(5)**3._rk - 3.0_rk*y(5))]
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),y(1),ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),y(2),ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),y(3),ZERO)
    polyval_test(4) = chebyshev_val(spacedim,mode,x(4),y(4),ZERO)
    polyval_test(5) = chebyshev_val(spacedim,mode,x(5),y(5),ZERO)
    
    @assertEqual(polyval_known,polyval_test,tol)
    
end subroutine




@Test
subroutine test_chebyshev_val_2D_33()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,   only: chebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, mode, i
    
    real(rk)                :: tol
    
    tol = 1.e-17_rk

    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    
    ! Find mode that has xi_order = 4  ;; eta_order = 4
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 4  .and. eta_order_2d(i) == 4) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [(4.0_rk*x(1)**3._rk-3.0_rk*x(1))*(4.0_rk*y(1)**3._rk-3.0_rk*y(1)), &
                     (4.0_rk*x(2)**3._rk-3.0_rk*x(2))*(4.0_rk*y(2)**3._rk-3.0_rk*y(2)), &
                     (4.0_rk*x(3)**3._rk-3.0_rk*x(3))*(4.0_rk*y(3)**3._rk-3.0_rk*y(3)), &
                     (4.0_rk*x(4)**3._rk-3.0_rk*x(4))*(4.0_rk*y(4)**3._rk-3.0_rk*y(4)), &
                     (4.0_rk*x(5)**3._rk-3.0_rk*x(5))*(4.0_rk*y(5)**3._rk-3.0_rk*y(5))]
    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),y(1),ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),y(2),ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),y(3),ZERO)
    polyval_test(4) = chebyshev_val(spacedim,mode,x(4),y(4),ZERO)
    polyval_test(5) = chebyshev_val(spacedim,mode,x(5),y(5),ZERO)
    
    @assertEqual(polyval_known,polyval_test,tol)
    
end subroutine





@Test
subroutine test_chebyshev_val_2D_44()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: chebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    
    ! Find mode that has xi_order = 5  ;; eta_order = 5
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 5  .and. eta_order_2d(i) == 5) then
            mode = i
            exit
        end if
    end do
    
    polyval_known = &
    [(8.0_rk*x(1)**4._rk-8.0_rk*x(1)**2._rk+1.0_rk)*(8.0_rk*y(1)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk), &
     (8.0_rk*x(2)**4._rk-8.0_rk*x(2)**2._rk+1.0_rk)*(8.0_rk*y(2)**4._rk-8.0_rk*y(2)**2._rk+1.0_rk), &
     (8.0_rk*x(3)**4._rk-8.0_rk*x(3)**2._rk+1.0_rk)*(8.0_rk*y(3)**4._rk-8.0_rk*y(3)**2._rk+1.0_rk), &
     (8.0_rk*x(4)**4._rk-8.0_rk*x(4)**2._rk+1.0_rk)*(8.0_rk*y(4)**4._rk-8.0_rk*y(4)**2._rk+1.0_rk), &
     (8.0_rk*x(5)**4._rk-8.0_rk*x(5)**2._rk+1.0_rk)*(8.0_rk*y(5)**4._rk-8.0_rk*y(5)**2._rk+1.0_rk) ]

    polyval_test(1) = chebyshev_val(spacedim,mode,x(1),y(1),ZERO)
    polyval_test(2) = chebyshev_val(spacedim,mode,x(2),y(2),ZERO)
    polyval_test(3) = chebyshev_val(spacedim,mode,x(3),y(3),ZERO)
    polyval_test(4) = chebyshev_val(spacedim,mode,x(4),y(4),ZERO)
    polyval_test(5) = chebyshev_val(spacedim,mode,x(5),y(5),ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine




!-------------------------------------------------
!   Test dchebyshev_val - 2D - against analytical solutions
!-------------------------------------------------


@Test
subroutine test_dchebyshev_val_2D_11_DXI()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 1
    
    ! Find mode that has xi_order = 2  ;; eta_order = 2
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 2  .and. eta_order_2d(i) == 2) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [y(1), y(2), y(3), y(4), y(5)]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine




@Test
subroutine test_dchebyshev_val_2D_11_DETA()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 2
    
    ! Find mode that has xi_order = 2  ;; eta_order = 2
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 2  .and. eta_order_2d(i) == 2) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [x(1), x(2), x(3), x(4), x(5)]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine








@Test
subroutine test_dchebyshev_val_2D_24_DXI()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 1
    
    ! Find mode that has xi_order = 3  ;; eta_order = 5
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 3  .and. eta_order_2d(i) == 5) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [4.0_rk*x(1)*(8.0_rk*y(1)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk), &
                     4.0_rk*x(2)*(8.0_rk*y(2)**4._rk-8.0_rk*y(2)**2._rk+1.0_rk), &
                     4.0_rk*x(3)*(8.0_rk*y(3)**4._rk-8.0_rk*y(3)**2._rk+1.0_rk), &
                     4.0_rk*x(4)*(8.0_rk*y(4)**4._rk-8.0_rk*y(4)**2._rk+1.0_rk), &
                     4.0_rk*x(5)*(8.0_rk*y(5)**4._rk-8.0_rk*y(5)**2._rk+1.0_rk)]

    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine




@Test
subroutine test_dchebyshev_val_2D_24_DETA()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 2
    
    ! Find mode that has xi_order = 3  ;; eta_order = 5
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 3  .and. eta_order_2d(i) == 5) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [16.0_rk*(2.0_rk*x(1)**2._rk-1.0_rk)*(2.0_rk*y(1)**3._rk-y(1)), &
                     16.0_rk*(2.0_rk*x(2)**2._rk-1.0_rk)*(2.0_rk*y(2)**3._rk-y(2)), &
                     16.0_rk*(2.0_rk*x(3)**2._rk-1.0_rk)*(2.0_rk*y(3)**3._rk-y(3)), &
                     16.0_rk*(2.0_rk*x(4)**2._rk-1.0_rk)*(2.0_rk*y(4)**3._rk-y(4)), &
                     16.0_rk*(2.0_rk*x(5)**2._rk-1.0_rk)*(2.0_rk*y(5)**3._rk-y(5))]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine






@Test
subroutine test_dchebyshev_val_2D_33_DXI()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 1
    
    ! Find mode that has xi_order = 4  ;; eta_order = 4
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 4  .and. eta_order_2d(i) == 4) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [(12.0_rk*x(1)**2._rk-3.0_rk)*(4.0_rk*y(1)**3._rk-3.0_rk*y(1)), &
                     (12.0_rk*x(2)**2._rk-3.0_rk)*(4.0_rk*y(2)**3._rk-3.0_rk*y(2)), &
                     (12.0_rk*x(3)**2._rk-3.0_rk)*(4.0_rk*y(3)**3._rk-3.0_rk*y(3)), &
                     (12.0_rk*x(4)**2._rk-3.0_rk)*(4.0_rk*y(4)**3._rk-3.0_rk*y(4)), &
                     (12.0_rk*x(5)**2._rk-3.0_rk)*(4.0_rk*y(5)**3._rk-3.0_rk*y(5))]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine




@Test
subroutine test_dchebyshev_val_2D_33_DETA()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 2
    
    ! Find mode that has xi_order = 4  ;; eta_order = 4
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 4  .and. eta_order_2d(i) == 4) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [(4.0_rk*x(1)**3._rk-3.0_rk*x(1))*(12.0_rk*y(1)**2._rk-3.0_rk), &
                     (4.0_rk*x(2)**3._rk-3.0_rk*x(2))*(12.0_rk*y(2)**2._rk-3.0_rk), &
                     (4.0_rk*x(3)**3._rk-3.0_rk*x(3))*(12.0_rk*y(3)**2._rk-3.0_rk), &
                     (4.0_rk*x(4)**3._rk-3.0_rk*x(4))*(12.0_rk*y(4)**2._rk-3.0_rk), &
                     (4.0_rk*x(5)**3._rk-3.0_rk*x(5))*(12.0_rk*y(5)**2._rk-3.0_rk)]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine








@Test
subroutine test_dchebyshev_val_2D_44_DXI()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 1
    
    ! Find mode that has xi_order = 5  ;; eta_order = 5
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 5  .and. eta_order_2d(i) == 5) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [(32.0_rk*x(1)**3._rk-16.0_rk*x(1))*(8.0_rk*y(1)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk), &
                     (32.0_rk*x(2)**3._rk-16.0_rk*x(2))*(8.0_rk*y(2)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk), &
                     (32.0_rk*x(3)**3._rk-16.0_rk*x(3))*(8.0_rk*y(3)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk), &
                     (32.0_rk*x(4)**3._rk-16.0_rk*x(4))*(8.0_rk*y(4)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk), &
                     (32.0_rk*x(5)**3._rk-16.0_rk*x(5))*(8.0_rk*y(5)**4._rk-8.0_rk*y(1)**2._rk+1.0_rk)]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine







@Test
subroutine test_dchebyshev_val_2D_44_DETA()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_2d, eta_order_2d
    use mod_chebyshev,  only: dchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial_dir, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim      = 2
    partial_dir   = 2
    
    ! Find mode that has xi_order = 5  ;; eta_order = 5
    do i = 1,size(xi_order_2d)
        if ( xi_order_2d(i) == 5  .and. eta_order_2d(i) == 5) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = [(8.0_rk*x(1)**4._rk-8.0_rk*x(1)**2._rk+1.0_rk)* (32.0_rk*y(1)**3._rk-16.0_rk*y(1)), &
                     (8.0_rk*x(2)**4._rk-8.0_rk*x(2)**2._rk+1.0_rk)* (32.0_rk*y(2)**3._rk-16.0_rk*y(2)), &
                     (8.0_rk*x(3)**4._rk-8.0_rk*x(3)**2._rk+1.0_rk)* (32.0_rk*y(3)**3._rk-16.0_rk*y(3)), &
                     (8.0_rk*x(4)**4._rk-8.0_rk*x(4)**2._rk+1.0_rk)* (32.0_rk*y(4)**3._rk-16.0_rk*y(4)), &
                     (8.0_rk*x(5)**4._rk-8.0_rk*x(5)**2._rk+1.0_rk)* (32.0_rk*y(5)**3._rk-16.0_rk*y(5))]
    polyval_test(1) = dchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial_dir)
    polyval_test(2) = dchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial_dir)
    polyval_test(3) = dchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial_dir)
    polyval_test(4) = dchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial_dir)
    polyval_test(5) = dchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial_dir)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine








!-------------------------------------------------
!   Test ddchebyshev_val - 3D - against analytical solutions
!-------------------------------------------------


!>
!!
!!  phi_200 = phi(xi)_2 * phi(eta)_0 * phi(zeta)_0
!!
!!
!----------------------------------------------------------
@Test
subroutine test_ddchebyshev_val_3D_mode200()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_ordering,   only: xi_order_3d, eta_order_3d, zeta_order_3d
    use mod_chebyshev,   only: ddchebyshev_val
    
    implicit none
    real(rk), dimension(5)  :: polyval_known,polyval_test,x,y
    integer(ik)             :: spacedim, partial1, partial2, mode, i
    
    ! Locations for testing
    x = [-0.5_rk,  0.5_rk, -0.5_rk,  0.5_rk,  0.0_rk]
    y = [-0.5_rk, -0.5_rk,  0.5_rk,  0.5_rk,  0.0_rk]
    
    spacedim = 3
    partial1 = 1
    partial2 = 1
    
    ! Find mode that has xi_order = 3  ;; eta_order = 1 ;; zeta_order = 1
    do i = 1,size(xi_order_3d)
        if ( xi_order_3d(i) == 3  .and. eta_order_3d(i) == 1 .and. zeta_order_3d(i) == 1) then
            mode = i
            exit
        end if
    end do
    

    polyval_known = 4._rk
    polyval_test(1) = ddchebyshev_val(spacedim,mode,x(1),y(1),ZERO,partial1,partial2)
    polyval_test(2) = ddchebyshev_val(spacedim,mode,x(2),y(2),ZERO,partial1,partial2)
    polyval_test(3) = ddchebyshev_val(spacedim,mode,x(3),y(3),ZERO,partial1,partial2)
    polyval_test(4) = ddchebyshev_val(spacedim,mode,x(4),y(4),ZERO,partial1,partial2)
    polyval_test(5) = ddchebyshev_val(spacedim,mode,x(5),y(5),ZERO,partial1,partial2)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine test_ddchebyshev_val_3D_mode200




