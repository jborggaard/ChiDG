module test_init_comm_D2E2_mod
    use mod_kinds,                  only: ik, rk
    use mod_constants,              only: XI_MIN, XI_MAX, BOUNDARY, IO_DESTINATION, NO_ID
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use type_chidg,                 only: chidg_t
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER
    use mpi_f08,                    only: MPI_COMM
    use pfunit_mod
    implicit none



    type(chidg_t)   :: chidg


contains

    !>  This test reads two 2x1x1 element grids using 1, 2, and 4 processors and 
    !!  tests communication data.
    !!
    !!
    !!  .---.---. .---.---.
    !!  |   |   | |   |   |
    !!  .---.---. .---.---.
    !!  Domain 1  Domain 2
    !!
    !!
    !!  Using 1 processor, all communication(face neighbors) should be local. 
    !!  Using 4 processors, all communication should occur globally, across processors. 
    !!  Here, we just check all the indices defining the communication for the different 
    !!  cases, npes=[1, 2, 4].
    !!
    !!
    !!  NOTE: The MPI Asserts seem to be hanging if they fail, instead of failing and 
    !!        moving on. Maybe some sort of synchronization issue?
    !!
    !!  NOTE: Keep in mind, that if the partitioning algorithm changes, then this test
    !!        could fail, because the elements may be distributed differently.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/22/2016
    !!
    !-----------------------------------------------------------------------------------
    @Test(npes=[1,2,4])
    subroutine test_init_comm_D2E2(this)
        class(MpiTestMethod), intent(inout) :: this

        type(mpi_comm)              :: ChiDG_COMM

        integer(ik)                 :: iread, ierr
        character(:), allocatable   :: gridfile
        integer(ik) :: n,i, idom_l, idom_g
        real(rk)    :: xmax
        logical :: have_low, have_high

        
        IRANK              = this%getProcessRank()
        NRANK              = this%getNumProcessesRequested()
        ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        call chidg%start_up('mpi',ChiDG_COMM)
        call chidg%start_up('core')



        gridfile = "D2E2M1.h5"
        if (IRANK == GLOBAL_MASTER) then
            call create_mesh_file("D2 NxNxN M1",gridfile,nelem_xi=4,nelem_eta=1,nelem_zeta=1)
        end if
        call MPI_Barrier(ChiDG_COMM,ierr)


        IO_DESTINATION = 'file'


        !
        ! Set accuracy for the solution expansion
        !
        call chidg%set('Solution Order', integer_input=3)


        !
        ! Read partition data: grid, boundary conditions
        !
        call chidg%read_mesh(gridfile)
        call MPI_Barrier(ChiDG_COMM,ierr)

        have_low  = .false.
        have_high = .false.
       
        do idom_g=1,2
          xmax = 0.d0
          idom_l = chidg%data%mesh%get_domain_l_from_domain_g(idom_g)
          if (idom_l == NO_ID) then
!            write(*,'(a,2i3)') ' D2E2 here a domain not here ',IRANK, idom_g
          else
             n = size(chidg%data%mesh%domain(idom_l)%nodes(:,1))
             xmax = chidg%data%mesh%domain(idom_l)%nodes(1,1)
             do i=2,n
             xmax = max(chidg%data%mesh%domain(idom_l)%nodes(i,1),xmax)
             enddo
!            write(*,*) ' D2E2 here b ',IRANK, idom_g,idom_l, n, xmax
             if (xmax .gt. 0.75d0) then
               have_high = .true. 
             else if (xmax .gt. 0.25d0) then
               have_low  = .true.
             endif
          endif
        enddo
 
        !
        ! Check communication data. proc, neighbor indices, etc.
        !
        if ( NRANK == 1 ) then
            ! Domain 1, Element 1
            @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )

            @assertEqual(0, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
            @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
            @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
            @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
            @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)

            ! Domain 1, Element 2
            @assertEqual(0, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_proc)
            @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_l)
            @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_g)
            @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_l)
            @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_g)

            @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(2,XI_MAX)%ftype )



            ! Domain 2, Element 1
            @assertEqual(BOUNDARY, chidg%data%mesh%domain(2)%faces(1,XI_MIN)%ftype )

            @assertEqual(0, chidg%data%mesh%domain(2)%faces(1,XI_MAX)%ineighbor_proc)
            @assertEqual(2, chidg%data%mesh%domain(2)%faces(1,XI_MAX)%ineighbor_domain_l)
            @assertEqual(2, chidg%data%mesh%domain(2)%faces(1,XI_MAX)%ineighbor_domain_g)
            @assertEqual(2, chidg%data%mesh%domain(2)%faces(1,XI_MAX)%ineighbor_element_l)
            @assertEqual(2, chidg%data%mesh%domain(2)%faces(1,XI_MAX)%ineighbor_element_g)

            ! Domain 2, Element 2
            @assertEqual(0, chidg%data%mesh%domain(2)%faces(2,XI_MIN)%ineighbor_proc)
            @assertEqual(2, chidg%data%mesh%domain(2)%faces(2,XI_MIN)%ineighbor_domain_l)
            @assertEqual(2, chidg%data%mesh%domain(2)%faces(2,XI_MIN)%ineighbor_domain_g)
            @assertEqual(1, chidg%data%mesh%domain(2)%faces(2,XI_MIN)%ineighbor_element_l)
            @assertEqual(1, chidg%data%mesh%domain(2)%faces(2,XI_MIN)%ineighbor_element_g)

            @assertEqual(BOUNDARY, chidg%data%mesh%domain(2)%faces(2,XI_MAX)%ftype )
        end if


        if ( NRANK == 2 ) then
            if ( IRANK == 0 ) then
              if (have_low) then
                ! Domain 1, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(0, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)

                ! Domain 1, Element 2
                @assertEqual(0, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_g)
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(2,XI_MAX)%ftype )
              else

                ! Domain 2, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(0, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)

                ! Domain 2, Element 2
                @assertEqual(0, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(2,XI_MAX)%ftype )
             endif

            else if ( IRANK == 1 ) then
              if (have_low) then
                ! Domain 1, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)

                ! Domain 1, Element 2
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(2,XI_MAX)%ftype )
              else
                ! Domain 2, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)

                ! Domain 2, Element 2
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(2,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(2,XI_MAX)%ftype )
              endif
            end if

        end if

        if ( NRANK == 4 ) then
            if ( IRANK == 0 ) then
              if (have_low) then
                ! Domain 1, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)
              else
                ! Domain 2, Element 2
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ftype )
              endif

            else if ( IRANK == 1 ) then
              if (have_low) then
                ! Domain 1, Element 2
                @assertEqual(0, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_g)
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ftype )
              else
                ! Domain 2, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(0, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)
              endif
            else if ( IRANK == 2 ) then
              if (have_high) then
                ! Domain 2, Element 2
                @assertEqual(3, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_g)
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ftype )
              else
                ! Domain 1, Element 2
                @assertEqual(3, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ineighbor_element_g)
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ftype )
              endif

            else if ( IRANK == 3 ) then
              if (have_high) then
                ! Domain 2, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)
              else
                ! Domain 1, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh%domain(1)%faces(1,XI_MIN)%ftype )
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh%domain(1)%faces(1,XI_MAX)%ineighbor_element_g)
              endif
            end if

        end if

        call chidg%shut_down('core')
        call chidg%shut_down('mpi')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(gridfile)
        end if

    end subroutine test_init_comm_D2E2
    !******************************************************************************************















end module test_init_comm_D2E2_mod
